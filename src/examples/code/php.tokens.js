TokenList {
  data: 
   [ { type: 'document', nesting: 1, level: 0 },
     { type: 'code',
       nesting: 1,
       language: 'php',
       level: 1,
       parent: [Object] },
     { type: 'text',
       content: 'require_once \'Zend/Uri/Http.php\';\n\nnamespace LocationWeb;\n\ninterface Factory\n{\n    static function _factory();\n}\n\nabstract class URI extends BaseURI implements Factory\n{\n    abstract function test();\n\n    public static $st1 = 1;\n    const ME = "Yo";\n    var $list = NULL;\n    private $var;\n\n    /**\n     * Returns a URI\n     *\n     * @return URI\n     */\n    static public function _factory($stats = array(), $uri = \'http\')\n    {\n        echo __METHOD__;\n        $uri = explode(\':\', $uri, 0b10);\n        $schemeSpecific = isset($uri[1]) ? $uri[1] : \'\';\n        $desc = \'Multi\nline description\';\n\n        // Security check\n        if (!ctype_alnum($scheme)) {\n            throw new Zend_Uri_Exception(\'Illegal scheme\');\n        }\n\n        $this->var = 0 - self::$st;\n        $this->list = list(Array("1"=> 2, 2=>self::ME, 3 => LocationWebURI::class));\n\n        return [\n            \'uri\'   => $uri,\n            \'value\' => null,\n        ];\n    }\n}\n\necho URI::ME . URI::$st1;\n\n__halt_compiler () ; datahere\ndatahere\ndatahere */\ndatahere',
       level: 2,
       parent: [Object] },
     { type: 'code',
       nesting: -1,
       language: 'php',
       level: 1,
       parent: [Object] },
     { type: 'document', nesting: -1, level: 0 } ],
  pos: 4,
  token: 
   { type: 'code',
     nesting: -1,
     language: 'php',
     level: 1,
     parent: { type: 'document', nesting: 1, level: 0 } } }